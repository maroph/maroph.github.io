{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"My GitHub Site","title":"Home"},{"location":"index.html#my-github-site","text":"","title":"My GitHub Site"},{"location":"docs/mkdocs.html","text":"Python3 mkdocs Module With the help of the Python3 mkdocs module you can create simple web sites written in Markdown . Setup a mkdocs Python3 Virtual Environment I use the Python3 module venv to setup a virtual environment: $ python3 -m venv venv-mkdocs $ source venv-mkdocs/bin/activate (venv-mkdocs) $ python -m pip install --upgrade pip (venv-mkdocs) $ python -m pip install --upgrade setuptools (venv-mkdocs) $ python -m pip install --upgrade wheel (venv-mkdocs) $ python -m pip install --upgrade mkdocs (venv-mkdocs) $ python -m pip freeze >venv-mkdocs/requirements.txt","title":"mkdocs"},{"location":"docs/mkdocs.html#python3-mkdocs-module","text":"With the help of the Python3 mkdocs module you can create simple web sites written in Markdown .","title":"Python3 mkdocs Module"},{"location":"docs/mkdocs.html#setup-a-mkdocs-python3-virtual-environment","text":"I use the Python3 module venv to setup a virtual environment: $ python3 -m venv venv-mkdocs $ source venv-mkdocs/bin/activate (venv-mkdocs) $ python -m pip install --upgrade pip (venv-mkdocs) $ python -m pip install --upgrade setuptools (venv-mkdocs) $ python -m pip install --upgrade wheel (venv-mkdocs) $ python -m pip install --upgrade mkdocs (venv-mkdocs) $ python -m pip freeze >venv-mkdocs/requirements.txt","title":"Setup a mkdocs Python3 Virtual Environment"},{"location":"docs/openssl.html","text":"OpenSSL Last update: 31-MAY-2020 Introduction This document collects some samples about how to use the OpenSSL CLI tool openssl. Software versions in use: Debian/Raspbian: 10.4 OpenSSL: 1.1.1d (standard version on Debian/Raspbian 10) Compile Current OpenSSL Versions You will find the current version of OpenSSL 1.1.1 at https://www.openssl.org/source/ . You have to call the related config script before compiling the software. The command $ make install will compile and install the software. For historic reasons, the default installation directory is /usr/local/ssl You can change this default by using one of the following options in calling the config script: --prefix=DIR Install in DIR/bin, DIR/lib, DIR/include/openssl. Configuration files used by OpenSSL will be in DIR/ssl or the directory specified by --openssldir. --openssldir=DIR Directory for OpenSSL files. If no prefix is specified, the library files and binaries are also installed there. For more details read the INSTALL file of the distribution. OpenSSL 1.1.1g wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz tar xvzf openssl-1.1.1g.tar.gz cd openssl-1.1.1g ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 1.1.1g 21 Apr 2020 OpenSSL 3.0 (not yet released) OpenSSL 3.0 is still in development, but you can already download the OpenSSL 3.0 Alpha2 Release. If you want to try the most recent version of OpenSSL 3.0 you have to clone the related Git repository: git clone https://github.com/openssl/openssl.git cd openssl ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 3.0.0-alpha3-dev (Library: OpenSSL 3.0.0-alpha3-dev ) You can update your local Git repository with the following commands: git fetch --all --tags git pull make clean ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 3.0.0-alpha3-dev (Library: OpenSSL 3.0.0-alpha3-dev ) Hashing/HMAC For test purposes we use the following input data file: $ echo -n \"Don't Panic!\" >test.dat Hashing The command $ openssl help shows (beside other information) the following lines: Message Digest commands (see the `dgst' command for more details) blake2b512 blake2s256 gost md4 md5 rmd160 sha1 sha224 sha256 sha3-224 sha3-256 sha3-384 sha3-512 sha384 sha512 sha512-224 sha512-256 shake128 shake256 sm3 This are the names of all supported hash algorithms (digests). We will use only the most prominent digests in our examples. openssl dgst -r -md5 test.dat d1297503e2ef44560545148728c71999 *test.dat openssl dgst -r -sha1 test.dat 81131aa1f6230de494f57cbdb3253cf5e796ec2e *test.dat openssl dgst -r -sha224 test.dat 6c24ba7f18fcec667a9ebe86941ce61ac4cafe30c838256344cafce1 *test.dat openssl dgst -r -sha256 test.dat bf2ea1037e3b6c37087ed16d803a80cc6500e155f2e5a374ded570e7729a4235 *test.dat openssl dgst -r -sha384 test.dat 4d28c0a5a68e33897717b78fd79a8a6f281f8d94c75a27c5558202edc169e5f16eba3d030089052b88be3f7f651ddda9 *test.dat openssl dgst -r -sha512 test.dat b7368e34cc1c6d6a201a9458f320bbcd68ea0bcff46cca906521a15f55662a7c5fdb878cfae8c60d8ac6ffe73c1d378aad6062dbf56990f766a1875b314ed2c9 *test.dat openssl dgst -r -sha3-224 test.dat 9aa934eb8467747911d6f2bb222228fc2848e7f420cba9d0036ca4fa *test.dat openssl dgst -r -sha3-256 test.dat 1e43e77bb6518dc2a1437448735c00579430c6152aefc69a128d90849171d498 *test.dat openssl dgst -r -sha3-384 test.dat 5034aca771001428a6d8c041eca21ecc4188503385560cf05c53b133faac4d2f45e30dfd836e5aad3ba0c4eca6051342 *test.dat openssl dgst -r -sha3-512 test.dat 99ed2251089fe5ec4ba19e25e5393d9beeec8c90f2f998de70a31df1cfe0e4d0b82119addbcd56d4bc7a5cd52c6121397c02e9dbf11ba3b8cc26a18f00f51dd1 *test.dat HMAC We use the same hashes (digests) for HMAC and the simple passphrase \"secret\". openssl dgst -r -md5 -hmac secret test.dat cede4d2d12ff91b30a724b61a2ebe778 *test.dat openssl dgst -r -sha1 -hmac secret test.dat afe570d95cd63698b29fcb9cb7824dbf9c8189ca *test.dat openssl dgst -r -sha224 -hmac secret test.dat 96e052736f1eeb3cf28ac9186633dcb5a19b7a84b769301cb256627b *test.dat openssl dgst -r -sha256 -hmac secret test.dat 3095e3bca9366ab33c9e4a7a0a5760f448b9153ea389f092ee1e9c14ed40aa7b *test.dat openssl dgst -r -sha384 -hmac secret test.dat 25f91825baca7ca9f3f9da6c502d0e5c518f9eafbb88676faa84379fcfb39b94c5f372702795e4dcbdc84d67c0075d42 *test.dat openssl dgst -r -sha512 -hmac secret test.dat b3103062d956630cc1e09fc10c02c005678735b0a1dee9bb6f618819ed664153a172350c10f4c82641b55338c7e904a273b6399b4f0ab0acb3848f388d8059c7 *test.dat openssl dgst -r -sha3-224 -hmac secret test.dat 54a0840427c5e8e626179fb6398fe92eb611af822ca760d595bf866c *test.dat openssl dgst -r -sha3-256 -hmac secret test.dat 034df10fc44169f9bdd23beda1782a20cccafced65e44f8136b9ba3ebd147240 *test.dat openssl dgst -r -sha3-384 -hmac secret test.dat fbaeeb2e80676e6c60e19783316eb32776fb293692da02319bd253c4670b33e28997ca77036f61e3fb723a4be9ab6fb9 *test.dat openssl dgst -r -sha3-512 -hmac secret test.dat caff89ee53d12aa20d8d99616ae8b81c2cf8c560e86bf8175715d70eb5b7fd3ecb450be29613461ea508afb65b4384a2ab63930099a5daeb21469cf3f94f5cf0 *test.dat BASE64 Encoding/Decoding BASE64 Encoding openssl enc -in test.dat -base64 -out test.dat.base64 BASE64 Decoding openssl enc -d -in test.dat.base64 -base64 -out test.dat Symmetric File Encryption/Decryption OpenSSL suports the following list of symmetric encryption algorithms: openssl enc -ciphers Supported ciphers: -aes-128-cbc -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-ofb -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-ofb -aes-256-cbc -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-ofb -aes128 -aes128-wrap -aes192 -aes192-wrap -aes256 -aes256-wrap -aria-128-cbc -aria-128-cfb -aria-128-cfb1 -aria-128-cfb8 -aria-128-ctr -aria-128-ecb -aria-128-ofb -aria-192-cbc -aria-192-cfb -aria-192-cfb1 -aria-192-cfb8 -aria-192-ctr -aria-192-ecb -aria-192-ofb -aria-256-cbc -aria-256-cfb -aria-256-cfb1 -aria-256-cfb8 -aria-256-ctr -aria-256-ecb -aria-256-ofb -aria128 -aria192 -aria256 -bf -bf-cbc -bf-cfb -bf-ecb -bf-ofb -blowfish -camellia-128-cbc -camellia-128-cfb -camellia-128-cfb1 -camellia-128-cfb8 -camellia-128-ctr -camellia-128-ecb -camellia-128-ofb -camellia-192-cbc -camellia-192-cfb -camellia-192-cfb1 -camellia-192-cfb8 -camellia-192-ctr -camellia-192-ecb -camellia-192-ofb -camellia-256-cbc -camellia-256-cfb -camellia-256-cfb1 -camellia-256-cfb8 -camellia-256-ctr -camellia-256-ecb -camellia-256-ofb -camellia128 -camellia192 -camellia256 -cast -cast-cbc -cast5-cbc -cast5-cfb -cast5-ecb -cast5-ofb -chacha20 -des -des-cbc -des-cfb -des-cfb1 -des-cfb8 -des-ecb -des-ede -des-ede-cbc -des-ede-cfb -des-ede-ecb -des-ede-ofb -des-ede3 -des-ede3-cbc -des-ede3-cfb -des-ede3-cfb1 -des-ede3-cfb8 -des-ede3-ecb -des-ede3-ofb -des-ofb -des3 -des3-wrap -desx -desx-cbc -id-aes128-wrap -id-aes128-wrap-pad -id-aes192-wrap -id-aes192-wrap-pad -id-aes256-wrap -id-aes256-wrap-pad -id-smime-alg-CMS3DESwrap -rc2 -rc2-128 -rc2-40 -rc2-40-cbc -rc2-64 -rc2-64-cbc -rc2-cbc -rc2-cfb -rc2-ecb -rc2-ofb -rc4 -rc4-40 -seed -seed-cbc -seed-cfb -seed-ecb -seed-ofb -sm4 -sm4-cbc -sm4-cfb -sm4-ctr -sm4-ecb -sm4-ofb Encryption of a File Encrypt a file with AES-256 and the passphrase \"secret\": openssl enc -e -aes256 -base64 -salt -in test.dat -k secret -out test.dat.enc Decryption of a File Decrypt a file with AES-256 and the passphrase \"secret\": openssl enc -d -aes256 -base64 -in test.dat.enc -k secret -out test.dat.decrypted Using RSA Key Pairs Without Certificate Data Create a private/public RSA key pair We use 4096 bits. A minimum of 2048 bits should be used. openssl genrsa -out key.pem 4096 The data is stored in the file key.pem . Although this file contains the (private/public) key pair. The file content is typically named private key in the OpenSSL environment. Create an AES-256 encrypted private/public key pair We use 4096 bits and the passphrase \"secret\" openssl genrsa -aes256 -out key_enc.pem -passout pass:secret 4096 Check the private key openssl rsa -check -noout -in key.pem or openssl rsa -check -noout -in key_enc.pem -passin pass:secret $ openssl rsa -check -noout -in key_enc.pem -passin pass:changeit RSA key ok The private/public key content openssl rsa -text -noout -in key.pem or openssl rsa -text -noout -in key_enc.pem -passin pass:changeit Extract the public key openssl rsa -in key.pem -pubout > public.pem Sign/Verify A File With A Private/Public Key Pair Sign a file openssl dgst -sha256 -sign key.pem -out test.dat.sig.sha256 test.dat Verify the signature of a file openssl dgst -sha256 -verify public.pem -signature test.dat.sig.sha256 test.dat Verify the signature only openssl rsautl -verify -hexdump \\ -inkey public.pem -pubin -keyform PEM \\ -in test.dat.sig.sha256 or openssl rsautl -verify -asn1parse -inkey public.pem -pubin \\ -keyform PEM -in test.dat.sig.sha256 Encrypt/Decrypt A File With A Private/Public Key Pair Encrypt a file with a given public key openssl rsautl -encrypt -pubin -inkey public.pem -in test.dat >test.dat.encryptetd Decrypt a file with the related private key openssl rsautl -decrypt -inkey key.pem -in test.dat.encryptetd > test.dat.decryptetd Create A Private/Public Key For SSH Usage You can simply use the above created key.pem file as a base: cp key.pem ~/.ssh/id_rsa_sample cd ~/.ssh ssh-keygen -y -f ~/.ssh/id_rsa_sample > ~/.ssh/id_rsa_sample.pub","title":"OpenSSL"},{"location":"docs/openssl.html#openssl","text":"Last update: 31-MAY-2020","title":"OpenSSL"},{"location":"docs/openssl.html#introduction","text":"This document collects some samples about how to use the OpenSSL CLI tool openssl. Software versions in use: Debian/Raspbian: 10.4 OpenSSL: 1.1.1d (standard version on Debian/Raspbian 10)","title":"Introduction"},{"location":"docs/openssl.html#compile-current-openssl-versions","text":"You will find the current version of OpenSSL 1.1.1 at https://www.openssl.org/source/ . You have to call the related config script before compiling the software. The command $ make install will compile and install the software. For historic reasons, the default installation directory is /usr/local/ssl You can change this default by using one of the following options in calling the config script: --prefix=DIR Install in DIR/bin, DIR/lib, DIR/include/openssl. Configuration files used by OpenSSL will be in DIR/ssl or the directory specified by --openssldir. --openssldir=DIR Directory for OpenSSL files. If no prefix is specified, the library files and binaries are also installed there. For more details read the INSTALL file of the distribution.","title":"Compile Current OpenSSL Versions"},{"location":"docs/openssl.html#openssl-111g","text":"wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz tar xvzf openssl-1.1.1g.tar.gz cd openssl-1.1.1g ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 1.1.1g 21 Apr 2020","title":"OpenSSL 1.1.1g"},{"location":"docs/openssl.html#openssl-30-not-yet-released","text":"OpenSSL 3.0 is still in development, but you can already download the OpenSSL 3.0 Alpha2 Release. If you want to try the most recent version of OpenSSL 3.0 you have to clone the related Git repository: git clone https://github.com/openssl/openssl.git cd openssl ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 3.0.0-alpha3-dev (Library: OpenSSL 3.0.0-alpha3-dev ) You can update your local Git repository with the following commands: git fetch --all --tags git pull make clean ./config make depend make LD_LIBRARY_PATH=. apps/openssl version OpenSSL 3.0.0-alpha3-dev (Library: OpenSSL 3.0.0-alpha3-dev )","title":"OpenSSL 3.0 (not yet released)"},{"location":"docs/openssl.html#hashinghmac","text":"For test purposes we use the following input data file: $ echo -n \"Don't Panic!\" >test.dat","title":"Hashing/HMAC"},{"location":"docs/openssl.html#hashing","text":"The command $ openssl help shows (beside other information) the following lines: Message Digest commands (see the `dgst' command for more details) blake2b512 blake2s256 gost md4 md5 rmd160 sha1 sha224 sha256 sha3-224 sha3-256 sha3-384 sha3-512 sha384 sha512 sha512-224 sha512-256 shake128 shake256 sm3 This are the names of all supported hash algorithms (digests). We will use only the most prominent digests in our examples. openssl dgst -r -md5 test.dat d1297503e2ef44560545148728c71999 *test.dat openssl dgst -r -sha1 test.dat 81131aa1f6230de494f57cbdb3253cf5e796ec2e *test.dat openssl dgst -r -sha224 test.dat 6c24ba7f18fcec667a9ebe86941ce61ac4cafe30c838256344cafce1 *test.dat openssl dgst -r -sha256 test.dat bf2ea1037e3b6c37087ed16d803a80cc6500e155f2e5a374ded570e7729a4235 *test.dat openssl dgst -r -sha384 test.dat 4d28c0a5a68e33897717b78fd79a8a6f281f8d94c75a27c5558202edc169e5f16eba3d030089052b88be3f7f651ddda9 *test.dat openssl dgst -r -sha512 test.dat b7368e34cc1c6d6a201a9458f320bbcd68ea0bcff46cca906521a15f55662a7c5fdb878cfae8c60d8ac6ffe73c1d378aad6062dbf56990f766a1875b314ed2c9 *test.dat openssl dgst -r -sha3-224 test.dat 9aa934eb8467747911d6f2bb222228fc2848e7f420cba9d0036ca4fa *test.dat openssl dgst -r -sha3-256 test.dat 1e43e77bb6518dc2a1437448735c00579430c6152aefc69a128d90849171d498 *test.dat openssl dgst -r -sha3-384 test.dat 5034aca771001428a6d8c041eca21ecc4188503385560cf05c53b133faac4d2f45e30dfd836e5aad3ba0c4eca6051342 *test.dat openssl dgst -r -sha3-512 test.dat 99ed2251089fe5ec4ba19e25e5393d9beeec8c90f2f998de70a31df1cfe0e4d0b82119addbcd56d4bc7a5cd52c6121397c02e9dbf11ba3b8cc26a18f00f51dd1 *test.dat","title":"Hashing"},{"location":"docs/openssl.html#hmac","text":"We use the same hashes (digests) for HMAC and the simple passphrase \"secret\". openssl dgst -r -md5 -hmac secret test.dat cede4d2d12ff91b30a724b61a2ebe778 *test.dat openssl dgst -r -sha1 -hmac secret test.dat afe570d95cd63698b29fcb9cb7824dbf9c8189ca *test.dat openssl dgst -r -sha224 -hmac secret test.dat 96e052736f1eeb3cf28ac9186633dcb5a19b7a84b769301cb256627b *test.dat openssl dgst -r -sha256 -hmac secret test.dat 3095e3bca9366ab33c9e4a7a0a5760f448b9153ea389f092ee1e9c14ed40aa7b *test.dat openssl dgst -r -sha384 -hmac secret test.dat 25f91825baca7ca9f3f9da6c502d0e5c518f9eafbb88676faa84379fcfb39b94c5f372702795e4dcbdc84d67c0075d42 *test.dat openssl dgst -r -sha512 -hmac secret test.dat b3103062d956630cc1e09fc10c02c005678735b0a1dee9bb6f618819ed664153a172350c10f4c82641b55338c7e904a273b6399b4f0ab0acb3848f388d8059c7 *test.dat openssl dgst -r -sha3-224 -hmac secret test.dat 54a0840427c5e8e626179fb6398fe92eb611af822ca760d595bf866c *test.dat openssl dgst -r -sha3-256 -hmac secret test.dat 034df10fc44169f9bdd23beda1782a20cccafced65e44f8136b9ba3ebd147240 *test.dat openssl dgst -r -sha3-384 -hmac secret test.dat fbaeeb2e80676e6c60e19783316eb32776fb293692da02319bd253c4670b33e28997ca77036f61e3fb723a4be9ab6fb9 *test.dat openssl dgst -r -sha3-512 -hmac secret test.dat caff89ee53d12aa20d8d99616ae8b81c2cf8c560e86bf8175715d70eb5b7fd3ecb450be29613461ea508afb65b4384a2ab63930099a5daeb21469cf3f94f5cf0 *test.dat","title":"HMAC"},{"location":"docs/openssl.html#base64-encodingdecoding","text":"","title":"BASE64 Encoding/Decoding"},{"location":"docs/openssl.html#base64-encoding","text":"openssl enc -in test.dat -base64 -out test.dat.base64","title":"BASE64 Encoding"},{"location":"docs/openssl.html#base64-decoding","text":"openssl enc -d -in test.dat.base64 -base64 -out test.dat","title":"BASE64 Decoding"},{"location":"docs/openssl.html#symmetric-file-encryptiondecryption","text":"OpenSSL suports the following list of symmetric encryption algorithms: openssl enc -ciphers Supported ciphers: -aes-128-cbc -aes-128-cfb -aes-128-cfb1 -aes-128-cfb8 -aes-128-ctr -aes-128-ecb -aes-128-ofb -aes-192-cbc -aes-192-cfb -aes-192-cfb1 -aes-192-cfb8 -aes-192-ctr -aes-192-ecb -aes-192-ofb -aes-256-cbc -aes-256-cfb -aes-256-cfb1 -aes-256-cfb8 -aes-256-ctr -aes-256-ecb -aes-256-ofb -aes128 -aes128-wrap -aes192 -aes192-wrap -aes256 -aes256-wrap -aria-128-cbc -aria-128-cfb -aria-128-cfb1 -aria-128-cfb8 -aria-128-ctr -aria-128-ecb -aria-128-ofb -aria-192-cbc -aria-192-cfb -aria-192-cfb1 -aria-192-cfb8 -aria-192-ctr -aria-192-ecb -aria-192-ofb -aria-256-cbc -aria-256-cfb -aria-256-cfb1 -aria-256-cfb8 -aria-256-ctr -aria-256-ecb -aria-256-ofb -aria128 -aria192 -aria256 -bf -bf-cbc -bf-cfb -bf-ecb -bf-ofb -blowfish -camellia-128-cbc -camellia-128-cfb -camellia-128-cfb1 -camellia-128-cfb8 -camellia-128-ctr -camellia-128-ecb -camellia-128-ofb -camellia-192-cbc -camellia-192-cfb -camellia-192-cfb1 -camellia-192-cfb8 -camellia-192-ctr -camellia-192-ecb -camellia-192-ofb -camellia-256-cbc -camellia-256-cfb -camellia-256-cfb1 -camellia-256-cfb8 -camellia-256-ctr -camellia-256-ecb -camellia-256-ofb -camellia128 -camellia192 -camellia256 -cast -cast-cbc -cast5-cbc -cast5-cfb -cast5-ecb -cast5-ofb -chacha20 -des -des-cbc -des-cfb -des-cfb1 -des-cfb8 -des-ecb -des-ede -des-ede-cbc -des-ede-cfb -des-ede-ecb -des-ede-ofb -des-ede3 -des-ede3-cbc -des-ede3-cfb -des-ede3-cfb1 -des-ede3-cfb8 -des-ede3-ecb -des-ede3-ofb -des-ofb -des3 -des3-wrap -desx -desx-cbc -id-aes128-wrap -id-aes128-wrap-pad -id-aes192-wrap -id-aes192-wrap-pad -id-aes256-wrap -id-aes256-wrap-pad -id-smime-alg-CMS3DESwrap -rc2 -rc2-128 -rc2-40 -rc2-40-cbc -rc2-64 -rc2-64-cbc -rc2-cbc -rc2-cfb -rc2-ecb -rc2-ofb -rc4 -rc4-40 -seed -seed-cbc -seed-cfb -seed-ecb -seed-ofb -sm4 -sm4-cbc -sm4-cfb -sm4-ctr -sm4-ecb -sm4-ofb","title":"Symmetric File Encryption/Decryption"},{"location":"docs/openssl.html#encryption-of-a-file","text":"Encrypt a file with AES-256 and the passphrase \"secret\": openssl enc -e -aes256 -base64 -salt -in test.dat -k secret -out test.dat.enc","title":"Encryption of a File"},{"location":"docs/openssl.html#decryption-of-a-file","text":"Decrypt a file with AES-256 and the passphrase \"secret\": openssl enc -d -aes256 -base64 -in test.dat.enc -k secret -out test.dat.decrypted","title":"Decryption of a File"},{"location":"docs/openssl.html#using-rsa-key-pairs-without-certificate-data","text":"","title":"Using RSA Key Pairs Without Certificate Data"},{"location":"docs/openssl.html#create-a-privatepublic-rsa-key-pair","text":"We use 4096 bits. A minimum of 2048 bits should be used. openssl genrsa -out key.pem 4096 The data is stored in the file key.pem . Although this file contains the (private/public) key pair. The file content is typically named private key in the OpenSSL environment.","title":"Create a private/public RSA key pair"},{"location":"docs/openssl.html#create-an-aes-256-encrypted-privatepublic-key-pair","text":"We use 4096 bits and the passphrase \"secret\" openssl genrsa -aes256 -out key_enc.pem -passout pass:secret 4096","title":"Create an AES-256 encrypted private/public key pair"},{"location":"docs/openssl.html#check-the-private-key","text":"openssl rsa -check -noout -in key.pem or openssl rsa -check -noout -in key_enc.pem -passin pass:secret $ openssl rsa -check -noout -in key_enc.pem -passin pass:changeit RSA key ok","title":"Check the private key"},{"location":"docs/openssl.html#the-privatepublic-key-content","text":"openssl rsa -text -noout -in key.pem or openssl rsa -text -noout -in key_enc.pem -passin pass:changeit","title":"The private/public key content"},{"location":"docs/openssl.html#extract-the-public-key","text":"openssl rsa -in key.pem -pubout > public.pem","title":"Extract the public key"},{"location":"docs/openssl.html#signverify-a-file-with-a-privatepublic-key-pair","text":"","title":"Sign/Verify A File With A Private/Public Key Pair"},{"location":"docs/openssl.html#sign-a-file","text":"openssl dgst -sha256 -sign key.pem -out test.dat.sig.sha256 test.dat","title":"Sign a file"},{"location":"docs/openssl.html#verify-the-signature-of-a-file","text":"openssl dgst -sha256 -verify public.pem -signature test.dat.sig.sha256 test.dat","title":"Verify the signature of a file"},{"location":"docs/openssl.html#verify-the-signature-only","text":"openssl rsautl -verify -hexdump \\ -inkey public.pem -pubin -keyform PEM \\ -in test.dat.sig.sha256 or openssl rsautl -verify -asn1parse -inkey public.pem -pubin \\ -keyform PEM -in test.dat.sig.sha256","title":"Verify the signature only"},{"location":"docs/openssl.html#encryptdecrypt-a-file-with-a-privatepublic-key-pair","text":"","title":"Encrypt/Decrypt A File With A Private/Public Key Pair"},{"location":"docs/openssl.html#encrypt-a-file-with-a-given-public-key","text":"openssl rsautl -encrypt -pubin -inkey public.pem -in test.dat >test.dat.encryptetd","title":"Encrypt a file with a given public key"},{"location":"docs/openssl.html#decrypt-a-file-with-the-related-private-key","text":"openssl rsautl -decrypt -inkey key.pem -in test.dat.encryptetd > test.dat.decryptetd","title":"Decrypt a file with the related private key"},{"location":"docs/openssl.html#create-a-privatepublic-key-for-ssh-usage","text":"You can simply use the above created key.pem file as a base: cp key.pem ~/.ssh/id_rsa_sample cd ~/.ssh ssh-keygen -y -f ~/.ssh/id_rsa_sample > ~/.ssh/id_rsa_sample.pub","title":"Create A Private/Public Key For SSH Usage"},{"location":"info/license.html","text":"License This work is licensed under a Creative Commons Attribution 4.0 International License","title":"License"},{"location":"info/license.html#license","text":"This work is licensed under a Creative Commons Attribution 4.0 International License","title":"License"},{"location":"info/sources.html","text":"Sources This site is build with mkdocs . The intro picture (assets/THHGTTG_intro.jpg) at the home page is a renamed copy of the image https://ichef.bbci.co.uk/images/ic/480xn/p01td1v2.jpg . This image is a screenshot of the original \"The Hitchhiker's Guide to the Galaxy\" Infocom game released in 1984. You can play a modernized version of this game at the following BBC site The Hitchhiker's Guide to the Galaxy - 30th Anniversary Edition","title":"Sources"},{"location":"info/sources.html#sources","text":"This site is build with mkdocs . The intro picture (assets/THHGTTG_intro.jpg) at the home page is a renamed copy of the image https://ichef.bbci.co.uk/images/ic/480xn/p01td1v2.jpg . This image is a screenshot of the original \"The Hitchhiker's Guide to the Galaxy\" Infocom game released in 1984. You can play a modernized version of this game at the following BBC site The Hitchhiker's Guide to the Galaxy - 30th Anniversary Edition","title":"Sources"}]}